LIB "teachstd.lib";
LIB "general.lib";
LIB "schubert.lib";
LIB "findifs.lib";
ring r = (16, a), (n74, bbara_in_3_, n16, n58, n73, n55, n78, n53, n51, n39, n79, n31, n30, bbara_in_1_, n32, n33, n35, n72, n_n62, n_n63, n_n60, n_n61, n49, n65, n63, n61, bbara_in_0_, n40, n42, bbara_in_2_, n47, n44, n29, n21, n26, n84, n86, n81, n80, n83, S, T), lp;
ideal from, to, new;
ideal reached;
ideal J;
ideal G;
ideal J0 = T^16+T;
ideal ideal_quotient;
ideal temp;

poly f_0 = n16 + n49 + n32 + n40 + n49 * n32 + n32 * n40 + n49 * n40 + n49 * n32 * n40;
poly f_1 = n21 + n61 + n65 + n51 + n55 + n61*n65 + n65*n51 + n61*n51 + n61*n55 + n65*n55 + n51*n55 + n61*n65*n51 + n61*n65*n55 + n65*n51*n55 + n61*n51*n55 + n61*n65*n51*n55;
poly f_2 = n26 + 1 + bbara_in_2_ + n74 + bbara_in_2_*n74 + bbara_in_2_*n_n62*(n29+1) + n74*n_n62*(n29+1) + bbara_in_2_*n74*n_n62*(n29+1);
poly f_3 = n31 + n84 + n86 + n80 + n84 * n86 + n86 * n80 + n84 * n80 + n84 * n86 * n80;
poly f_4 = n29 + bbara_in_1_ * bbara_in_0_;
poly f_5 = n30 + n_n61 * n29 + n29;
poly f_6 = n32 + n30 * bbara_in_2_ * (n_n63 + 1);
poly f_7 = n33 + bbara_in_3_ * n_n62 + n_n62;
poly f_8 = n35 + bbara_in_3_ * (n_n62 + 1) * (n_n63 + 1);
poly f_9 = n39 + n_n61 * (n_n60 + 1) * n29;
poly f_10 = n40 + n39*(bbara_in_2_+n33+n35+bbara_in_2_*n33+n33*n35+bbara_in_2_*n35+bbara_in_2_*n33*n35);
poly f_11 = n42 + 1 + bbara_in_3_ + bbara_in_2_ + bbara_in_3_ * bbara_in_2_;
poly f_12 = n44 + (n_n62 + 1) * n_n61 * n42;
poly f_13 = n47 + bbara_in_0_*bbara_in_1_*(1+ bbara_in_2_*n_n62);
poly f_14 = n49 + n_n60 * n44 + n_n60*(n47+1) + n_n60*n44*(1+n47);
poly f_15 = n51 + n_n61 * n29 + n_n61;
poly f_16 = n53 + (n_n62 + 1) * bbara_in_2_ * n_n60;
poly f_17 = n55 + n29 * (n_n61 + 1) * n53;
poly f_18 = n58 + n_n61*n_n60 + n_n61*n_n63 + n_n60*n_n61*n_n63;
poly f_19 = n61 + bbara_in_3_*(1+bbara_in_2_)*(n30+n58+n30*n58);
poly f_20 = n63 + (n30+1)*n_n60 + (n30+1)*(n_n61+1)+n_n60*(n30+1)*(n_n61+1);
poly f_21 = n65 + (n63 + 1) * (bbara_in_2_ + 1) * n_n62;
poly f_22 = n72 + (1+n_n63*n29)*(n_n60+(1+n_n62)+n_n60*(1+n_n62));
poly f_23 = n73 + 1 + bbara_in_3_ + n72 + bbara_in_3_ * n72;
poly f_24 = n74 + (n35+1)*(n73+1) + (n39+1)*(n73+1) + (n35+1)*(n39+1)*(n73+1);
poly f_25 = n78 + n30 * n_n60 * n_n62;
poly f_26 = n79 + (n_n61+1)*(n78+1) + (n_n63+1)*(n78+1) + (n_n61+1)*(n78+1)*(n_n63+1);
poly f_27 = n80 + bbara_in_3_ * (bbara_in_2_ + 1) * (n79 + 1);
poly f_28 = n81 + bbara_in_2_ * n_n61 + bbara_in_2_;
poly f_29 = n83 + bbara_in_0_ * bbara_in_1_ * (n81 + 1);
poly f_30 = n84 + n_n63 * n83 + n_n63;
poly f_31 = n86 + n53 * n_n61 * n29;
poly f_van_32 = n74^2 - n74;
poly f_van_33 = bbara_in_3_^2 - bbara_in_3_;
poly f_van_34 = n16^2 - n16;
poly f_van_35 = n58^2 - n58;
poly f_van_36 = n73^2 - n73;
poly f_van_37 = n55^2 - n55;
poly f_van_38 = n78^2 - n78;
poly f_van_39 = n53^2 - n53;
poly f_van_40 = n51^2 - n51;
poly f_van_41 = n39^2 - n39;
poly f_van_42 = n79^2 - n79;
poly f_van_43 = n31^2 - n31;
poly f_van_44 = n30^2 - n30;
poly f_van_45 = bbara_in_1_^2 - bbara_in_1_;
poly f_van_46 = n32^2 - n32;
poly f_van_47 = n33^2 - n33;
poly f_van_48 = n35^2 - n35;
poly f_van_49 = n72^2 - n72;
poly f_van_50 = n_n62^2 - n_n62;
poly f_van_51 = n_n63^2 - n_n63;
poly f_van_52 = n_n60^2 - n_n60;
poly f_van_53 = n_n61^2 - n_n61;
poly f_van_54 = n49^2 - n49;
poly f_van_55 = n65^2 - n65;
poly f_van_56 = n63^2 - n63;
poly f_van_57 = n61^2 - n61;
poly f_van_58 = bbara_in_0_^2 - bbara_in_0_;
poly f_van_59 = n40^2 - n40;
poly f_van_60 = n42^2 - n42;
poly f_van_61 = bbara_in_2_^2 - bbara_in_2_;
poly f_van_62 = n47^2 - n47;
poly f_van_63 = n44^2 - n44;
poly f_van_64 = n29^2 - n29;
poly f_van_65 = n21^2 - n21;
poly f_van_66 = n26^2 - n26;
poly f_van_67 = n84^2 - n84;
poly f_van_68 = n86^2 - n86;
poly f_van_69 = n81^2 - n81;
poly f_van_70 = n80^2 - n80;
poly f_van_71 = n83^2 - n83;
poly f_van_72 = T^16- T;
poly f_van_73 = S^16- S;
poly f_74 = S+n_n60+n_n61*a+n_n62*a^2+n_n63*a^3;
poly f_75 = T+n16+n21*a+n26*a^2+n31*a^3;

ideal poly_func = f_0,  f_1,  f_2,  f_3,  f_4,  f_5,  f_6,  f_7,  f_8,  f_9,  f_10,  f_11,  f_12,  f_13,  f_14,  f_15,  f_16,  f_17,  f_18,  f_19,  f_20,  f_21,  f_22,  f_23,  f_24,  f_25,  f_26,  f_27,  f_28,  f_29,  f_30,  f_31,  f_van_32,  f_van_33,  f_van_34,  f_van_35,  f_van_36,  f_van_37,  f_van_38,  f_van_39,  f_van_40,  f_van_41,  f_van_42,  f_van_43,  f_van_44,  f_van_45,  f_van_46,  f_van_47,  f_van_48,  f_van_49,  f_van_50,  f_van_51,  f_van_52,  f_van_53,  f_van_54,  f_van_55,  f_van_56,  f_van_57,  f_van_58,  f_van_59,  f_van_60,  f_van_61,  f_van_62,  f_van_63,  f_van_64,  f_van_65,  f_van_66,  f_van_67,  f_van_68,  f_van_69,  f_van_70,  f_van_71,  f_van_72,  f_van_73,  f_74,  f_75;

from[1] = S-0;
reached = subst(from[1],S,T);
reached;
int i = 0;
while(1){
        i++;
        J = poly_func,from[i];
        G = groebner(J);
        G;
        to[i] = G[1];
        "To ", i;
        to[i];
        ideal_quotient = quotient(J0,reached);
        printf("Ideal quotient: ");
        ideal_quotient;
        //temp = to[i]+ideal_quotient;
        temp = groebner(to[i]+ideal_quotient);
        new[i] = temp[1];
        printf("Newly reached states: ");
        new[i];
        if(new[i] == 1 || i > 25) {
            break;
            }
        reached = product(reached,new[i]);
        printf("Reached state polynomial: ");
        reached;
        from[i+1] = subst(new[i],T,S);
}

"BFS Depth", i-2;
"Final reachable states: ", reached;
