LIB "teachstd.lib";
LIB "general.lib";
LIB "schubert.lib";
LIB "findifs.lib";
ring r = (8, a), (G7, G6, G5, G3, G2, G1, G0, G9, G8, G17, G16, G15, G14, G13, G12, G11, G10, S, T), lp;
ideal from, to, new;
ideal reached;
ideal J;
ideal G;
ideal J0 = T^8+T;
ideal ideal_quotient;
ideal temp;

poly f_0 = G17 + G11 + 1;
poly f_1 = G10 + 1 + G14 + G11 + G14 * G11;
poly f_2 = G11 + 1 + G5 + G9 + G5 * G9;
poly f_3 = G13 + 1 + G2 + G12 + G2 * G12;
poly f_4 = G14 + G0 + 1;
poly f_5 = G9 + 1 + G15 * G16;
poly f_6 = G12 + 1 + G1 + G7 + G1 * G7;
poly f_7 = G8 + G14 * G6;
poly f_8 = G15 + G8 + G12 + G8 * G12;
poly f_9 = G16 + G8 + G3 + G8 * G3;
poly f_van_10 = G7^2 - G7;
poly f_van_11 = G6^2 - G6;
poly f_van_12 = G5^2 - G5;
poly f_van_13 = G3^2 - G3;
poly f_van_14 = G2^2 - G2;
poly f_van_15 = G1^2 - G1;
poly f_van_16 = G0^2 - G0;
poly f_van_17 = G9^2 - G9;
poly f_van_18 = G8^2 - G8;
poly f_van_19 = G17^2 - G17;
poly f_van_20 = G16^2 - G16;
poly f_van_21 = G15^2 - G15;
poly f_van_22 = G14^2 - G14;
poly f_van_23 = G13^2 - G13;
poly f_van_24 = G12^2 - G12;
poly f_van_25 = G11^2 - G11;
poly f_van_26 = G10^2 - G10;
poly f_van_27 = T^8- T;
poly f_van_28 = S^8- S;
poly f_29 = S+G5+G6*a+G7*a^2;
poly f_30 = T+G10+G11*a+G13*a^2;

ideal poly_func = f_0,  f_1,  f_2,  f_3,  f_4,  f_5,  f_6,  f_7,  f_8,  f_9,  f_van_10,  f_van_11,  f_van_12,  f_van_13,  f_van_14,  f_van_15,  f_van_16,  f_van_17,  f_van_18,  f_van_19,  f_van_20,  f_van_21,  f_van_22,  f_van_23,  f_van_24,  f_van_25,  f_van_26,  f_van_27,  f_van_28, f_29, f_30;

from[1] = S-0;
reached = subst(from[1],S,T);
reached;
int i = 0;
while(1){
        i++;
        J = poly_func,from[i];
        G = groebner(J);
        G;
        to[i] = G[1];
        "To ", i;
        to[i];
        ideal_quotient = quotient(J0,reached);
        printf("Ideal quotient: ");
        ideal_quotient;
        //temp = to[i]+ideal_quotient;
        temp = groebner(to[i]+ideal_quotient);
        new[i] = temp[1];
        printf("Newly reached states: ");
        new[i];
        if(new[i] == 1 || i > 25) {
            break;
            }
        reached = product(reached,new[i]);
        printf("Reached state polynomial: ");
        reached;
        from[i+1] = subst(new[i],T,S);
}

"BFS Depth", i-2;
"Final reachable states: ", reached;
